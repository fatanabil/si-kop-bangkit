import Head from "next/head";
import { useEffect, useState } from "react";
import { FiDownload, FiPlus, FiRefreshCw, FiTrash } from "react-icons/fi";
import Badge from "~/components/Badge";
import Button from "~/components/Button";
import IconButton from "~/components/IconButton";
import Layout from "~/components/Layouts/Layout";
import Loader from "~/components/Loader";
import SectionDivider from "~/components/SectionDivider";
import Table from "~/components/Table/Table";
import TableBody from "~/components/Table/TableBody";
import TableBodyRow from "~/components/Table/TableBodyRow";
import TableBodyRowItem from "~/components/Table/TableBodyRowItem";
import TableHead from "~/components/Table/TableHead";
import TableHeadItem from "~/components/Table/TableHeadItem";
import useLocalStorage from "~/hooks/useLocalStorage";
import useModal from "~/hooks/useModal";
import {
  type ListedAnggotaSchema,
  type UnlistedAnggotaSchema,
} from "~/schemas/tagihan";
import {
  TAGIHAN_LISTED_KEY_LOCAL_STORAGE,
  TAGIHAN_UNLISTED_KEY_LOCAL_STORAGE,
} from "~/utils/constants";
import formatCurrency from "~/utils/formatCurrency";
import CheckUnlistedAnggotaModal from "../modals/CheckUnlistedAnggotaModal";
import InputTextTagihanModal from "../modals/InputTextTagihanModal";
import { api } from "~/utils/api";
import { type InstansiSchema } from "~/schemas/instansi";
import { type AnggotaWithInstansi } from "~/schemas/anggota";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import { MonthsList } from "~/components/MonthCalendar";

interface AnggotaWithInstansiWithJumlah extends AnggotaWithInstansi {
  jumlah: number;
}

type InstansiGroup = {
  Instansi: InstansiSchema;
  subtotal: number;
  anggota: AnggotaWithInstansiWithJumlah[];
};

const TagihanPage = () => {
  const [listedAnggotaValue, setListedAnggotaValue] = useLocalStorage<
    ListedAnggotaSchema[]
  >(TAGIHAN_LISTED_KEY_LOCAL_STORAGE, []);
  const [unlistedAnggotaValue, setUnlistedAnggotaValue] = useLocalStorage<
    UnlistedAnggotaSchema[]
  >(TAGIHAN_UNLISTED_KEY_LOCAL_STORAGE, []);

  const [total, setTotal] = useState<number | null>(null);

  const { mutate: checkData, isPending } =
    api.tagihan.checkInputText.useMutation({
      onSuccess: (result) => {
        setListedAnggotaValue(result.data.listed_anggota);
        setUnlistedAnggotaValue(result.data.unlisted_anggota);
      },
    });

  const inputTextModal = useModal();
  const unlistedAnggotaModal = useModal<UnlistedAnggotaSchema[]>();

  const handleOnClickDeleteTagihanData = () => {
    setListedAnggotaValue([]);
    setUnlistedAnggotaValue([]);
  };
  const handleOnClickOpenUnlistedAnggotaModal = () => {
    unlistedAnggotaModal.setData(unlistedAnggotaValue);
    unlistedAnggotaModal.openModal();
  };
  const reCheckTagihanData = () => {
    const data = [...listedAnggotaValue, ...unlistedAnggotaValue];
    checkData(data);
  };

  const handleOnClickDownloadExcelFile = () => {
    const groupedData: Record<string, InstansiGroup> = {};

    listedAnggotaValue.forEach((data) => {
      const { jumlah, Instansi } = data;

      if (!groupedData[Instansi.kode_ins]) {
        groupedData[Instansi.kode_ins] = {
          Instansi,
          subtotal: 0,
          anggota: [],
        };
      }

      groupedData[Instansi.kode_ins]!.subtotal += jumlah;
      groupedData[Instansi.kode_ins]!.anggota.push(data);
    });

    const result = Object.values(groupedData).sort(
      (a, b) => a.Instansi.id - b.Instansi.id,
    );

    exportToExcel(
      result,
      `REKAP TAGIHAN ${MonthsList({ style: "long" })[new Date().getMonth()]?.toLocaleUpperCase()} ${new Date().getFullYear()}`,
    );
  };

  useEffect(() => {
    setTotal(listedAnggotaValue.reduce((acc, curr) => acc + curr.jumlah, 0));
  }, [listedAnggotaValue]);

  if (total === null)
    return (
      <>
        <Head>
          <title>SI KOP BANGKIT</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="grid min-h-screen w-full place-content-center gap-8 bg-slate-800 text-center">
          <Loader className="h-24 w-24" />
        </div>
      </>
    );

  return (
    <Layout page="Tagihan">
      <section className="flex flex-col justify-between gap-8 md:gap-4 lg:flex-row lg:items-end">
        <div className="flex flex-col justify-start gap-3">
          <h1 className="text-3xl font-semibold text-slate-200">
            Halaman Tagihan
          </h1>
          <p className="text-lg text-amber-400">
            Total : {formatCurrency(total)}
          </p>
        </div>
        <div className="flex flex-col gap-3 md:flex-row">
          {listedAnggotaValue.length !== 0 ? (
            <>
              <div className="flex w-full justify-end gap-3">
                <IconButton
                  icon={<FiTrash />}
                  className="bg-red-400 px-3 hover:bg-red-500"
                  title="hapus data tagihan"
                  onClick={handleOnClickDeleteTagihanData}
                />
                <IconButton
                  icon={
                    <FiRefreshCw className={isPending ? "animate-spin" : ""} />
                  }
                  className="px-3"
                  title="Refresh data"
                  onClick={reCheckTagihanData}
                />
              </div>
              <Button
                prefixIcon={<FiDownload />}
                className="min-w-fit bg-teal-600 hover:bg-teal-800"
                onClick={handleOnClickDownloadExcelFile}
              >
                Download Excel
              </Button>
              <Button
                className="relative min-w-fit"
                onClick={handleOnClickOpenUnlistedAnggotaModal}
              >
                <Badge value={unlistedAnggotaValue.length} />
                <span>Cek Anggota baru</span>
              </Button>
            </>
          ) : (
            <Button prefixIcon={<FiPlus />} onClick={inputTextModal.openModal}>
              Input text
            </Button>
          )}
        </div>
      </section>
      <SectionDivider />
      <section className="rounded-lg bg-slate-700 p-4 text-xs shadow-lg sm:p-8 sm:text-base">
        <Table>
          <TableHead>
            <TableHeadItem className="w-full min-w-12 max-w-16 text-center">
              No.
            </TableHeadItem>
            <TableHeadItem className="w-full min-w-36 max-w-48">
              No Rekening
            </TableHeadItem>
            <TableHeadItem className="w-full min-w-72 max-w-80">
              Nama Anggota
            </TableHeadItem>
            <TableHeadItem className="w-full min-w-36 max-w-44">
              Instansi
            </TableHeadItem>
            <TableHeadItem className="w-full min-w-36 max-w-44">
              Jumlah
            </TableHeadItem>
          </TableHead>
          <TableBody>
            {listedAnggotaValue.slice(0, 50).map((dt, i) => (
              <TableBodyRow key={dt.id}>
                <TableBodyRowItem className="w-full min-w-12 max-w-16 text-center">
                  {i + 1}
                </TableBodyRowItem>
                <TableBodyRowItem className="w-full min-w-36 max-w-48 text-left">
                  {dt.no_rek}
                </TableBodyRowItem>
                <TableBodyRowItem className="w-full min-w-72 max-w-80 text-left">
                  {dt.nama_anggota}
                </TableBodyRowItem>
                <TableBodyRowItem className="w-full min-w-36 max-w-44 text-left">
                  {dt.Instansi.nama_ins}
                </TableBodyRowItem>
                <TableBodyRowItem className="w-full min-w-36 max-w-44 text-left">
                  {formatCurrency(dt.jumlah)}
                </TableBodyRowItem>
              </TableBodyRow>
            ))}
          </TableBody>
        </Table>
        {listedAnggotaValue.length === 0 ? (
          <p className="mt-4 text-center text-slate-400">
            Input text untuk mengecek tagihan
          </p>
        ) : (
          <p
            className="mt-4 cursor-pointer text-center text-slate-400 hover:underline"
            onClick={() => window.scrollTo({ top: 0, behavior: "smooth" })}
          >
            Untuk melihat data lainnya silahkan download file Excel di atas
            halaman ...
          </p>
        )}
      </section>
      <InputTextTagihanModal
        setListedAnggotaValue={setListedAnggotaValue}
        setUnlistedAnggotaValue={setUnlistedAnggotaValue}
        {...inputTextModal}
      />
      <CheckUnlistedAnggotaModal
        reCheckTagihanData={reCheckTagihanData}
        {...unlistedAnggotaModal}
      />
    </Layout>
  );
};

const exportToExcel = (data: InstansiGroup[], filename: string) => {
  const rows: {
    "No Rekening": string;
    "Nama Anggota": string;
    Instansi: string;
    Jumlah: number;
  }[] = [];

  data.forEach((item) => {
    item.anggota.forEach((anggota) => {
      rows.push({
        "No Rekening": anggota.no_rek,
        "Nama Anggota": anggota.nama_anggota,
        Instansi: anggota.Instansi.nama_ins,
        Jumlah: anggota.jumlah,
      });
    });

    rows.push({
      "No Rekening": "",
      "Nama Anggota": "",
      Instansi: `Subtotal ${item.Instansi.nama_ins}`,
      Jumlah: item.subtotal,
    });
  });
  rows.push({
    "No Rekening": "",
    "Nama Anggota": "",
    Instansi: "Grand Total",
    Jumlah: data.reduce((acc, curr) => acc + curr.subtotal, 0),
  });

  const worksheet = XLSX.utils.json_to_sheet(rows);
  worksheet["!cols"] = [{ wch: 15 }, { wch: 40 }, { wch: 35 }, { wch: 15 }];
  Object.keys(worksheet).forEach((cellRef) => {
    if (cellRef.startsWith("D") && worksheet[cellRef]) {
      const cell = worksheet[cellRef] as XLSX.CellObject;
      if (cell) {
        cell.z = "#,##0";
      }
    }
  });
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "Data");

  const excelBuffer: ArrayBuffer = XLSX.write(workbook, {
    bookType: "xlsx",
    type: "array",
  }) as ArrayBuffer;
  const excelFile = new Blob([excelBuffer], {
    type: "application/octet-stream",
  });

  (saveAs as (blob: Blob, filename: string) => void)(
    excelFile,
    filename + ".xlsx",
  );
};

export default TagihanPage;
